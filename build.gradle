plugins {
    id "com.avast.gradle.docker-compose" version "0.9.1"
    id("maven-publish")
}

apply plugin: 'groovy'

group 'com.codebrig'
version '0.3.9'

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/codebrig/phenomena")
            credentials {
                username = System.getenv("GITHUB_ACTOR") ?: (System.getenv("gpr.user") ?: System.getProperty("gpr.user"))
                password = System.getenv("GITHUB_TOKEN") ?: (System.getenv("gpr.key" ?: System.getProperty("gpr.key")))
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            groupId group
            artifactId jar.baseName.toLowerCase()

            from(components.java)
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven {
        url 'https://repo.grakn.ai/repository/maven/'
    }
    maven {
        url "https://maven.pkg.github.com/codebrig/arthur"
        credentials {
            username = System.getenv("GITHUB_ACTOR") ?: (System.getenv("gpr.user") ?: System.getProperty("gpr.user"))
            password = System.getenv("GITHUB_TOKEN") ?: (System.getenv("gpr.key" ?: System.getProperty("gpr.key")))
        }
    }
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.13'
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.26'
    implementation 'org.codehaus.groovy:groovy-all:3.0.7'
    implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.17.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.5'
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.9'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    implementation "com.vaticle.typedb:typedb-client:2.5.0"
    implementation files('lib/bblfsh-client-1.11.1.jar')
    implementation 'org.bblfsh:bblfsh-client:1.11.0'
    implementation 'com.codebrig:arthur:0.4.6'
}

test {
    dependsOn "composeUp"
    finalizedBy "composeDown"
}

dockerCompose {
    useComposeFiles = ['./docker-compose.yml']
    dockerComposeWorkingDirectory = './docker/'
    captureContainersOutput = true
}

task createProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/phenomena_build.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}
